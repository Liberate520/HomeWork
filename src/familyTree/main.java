package homeWork.src.familyTree;
// ДЗ 1
// Реализовать, с учетом ооп подхода, приложение
// Для проведения исследований с генеалогическим древом.
// Идея: описать некоторое количество компонент, например:
//
// модель человека и модель семейного дерева для хранения связей и отношений между людьми: родитель, ребёнок - классика,
// но можно подумать и про отношение, брат, свекровь, сестра и т. д.
// У дерева обязательно реализовать метод добавления нового человека в семейное дерево, поиск человека по имени и вывод всех людей из дерева.
// У человека можно реализовать методы вывода всех сестер или всех детей.
//
// Проект сдать либо в виде репозитория либо в виде PullRequest к проекту: https://github.com/Liberate520/homeWork
// Если делаете PR, то в качестве ответа укажите ссылку на конкретный PR
// Инструкция на то как сделать PR https://youtu.be/veMDnBt30pk
// По вопросам домашки писать @Liberate520
// Обязательно пробуем свои силы, в дальнейшем будем этот проект развивать
// ДЗ 2
// В проекте с генеалогическим древом подумайте и используйте интерфейсы.
// Дополнить проект методами записи в файл и чтения из файла.
// Для этого создать отдельный класс и реализовать в нем нужные методы.
// Для данного класса сделайте интерфейс, который и используйте в своей программе.
// Например, в классе дерева в качестве аргумента метода save передавайте не конкретный класс, а объект интерфейса,
// с помощью которого и будет происходить запись. Пример работы с интерфейсом Serialazable можно найти в материалах к уроку
// ДЗ 3
// В проекте с деревом реализовать интерфейс Iterable для дерева.
// Создать методы сортировки списка людей перед выводом, например по имени или по дате рождения
// ДЗ 4
// Продолжаем грейдить наш проект с генеалогическим древом. Изменить древо, сделать класс параметизированным.
// Продумать класс общения с пользователем, сделать набор команд, для операций над деревом
// ДЗ 5
// Продолжаем работать с проектом дерева. Попытаться структурировать список команд.
// Если не создан отдельный класс под общение с пользователем, то создать.
// Все процессы связанные с выводом на консоль или чтением с консоли необходимо делать только в одном специализированном классе (например View).
// Сам этот класс может общаться со многими классами позволяющих ему реализовать эти две задачи.
// Можно также разбить команды на отдельные классы, связанные интерфейсом (смотри пример в конце семинара).
// Если все и так уже реализовано в таком виде, то просто сдаем работу)


import homeWork.src.familyTree.presenter.Presenter;
import homeWork.src.familyTree.ui.ConsoleUI;

public class main {


    public static void main(String[] args) {
        FileHandler fileHandler = new FileHandler();
//  Тип Human передаётся в generic, в new FamilyTree необходим "алмазик" <>
        FamilyTree<Human> familyTree = new FamilyTree<>(fileHandler);
        Presenter presenter = new Presenter(familyTree);
//        создаём consoleUI и передаём ему дерево, обработчик, презентер
        ConsoleUI consoleUI = new ConsoleUI(familyTree, fileHandler, presenter);
//        запускаем
        consoleUI.start();

    }
}
